name: CD Pipeline - Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build Website
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Install dependencies
      run: npm ci
      
    - name: Create dist directory
      run: mkdir -p dist
      
    - name: Copy source files
      run: |
        cp index.html dist/
        cp style.css dist/
        cp script.js dist/
        
    - name: Build and optimize
      run: |
        # Minify CSS
        npx cleancss -o dist/style.min.css style.css || cp style.css dist/style.min.css
        
        # Minify JavaScript
        npx terser script.js -o dist/script.min.js -c -m || cp script.js dist/script.min.js
        
        # Update HTML to use minified files
        sed -i 's/style\.css/style.min.css/g' dist/index.html
        sed -i 's/script\.js/script.min.js/g' dist/index.html
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  post-deploy-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for deployment
      run: sleep 30
      
    - name: Test live website
      run: |
        # Test if website is accessible
        curl -f -s -o /dev/null ${{ needs.deploy.outputs.page_url }} || exit 1
        echo "Website is accessible!"
        
    - name: Run Lighthouse on live site
      run: |
        mkdir -p reports
        npx lighthouse ${{ needs.deploy.outputs.page_url }} --output=html --output-path=reports/lighthouse-live.html --chrome-flags="--headless --no-sandbox --disable-gpu"
      continue-on-error: true
      
    - name: Upload live site report
      uses: actions/upload-artifact@v4
      with:
        name: live-site-report
        path: reports/
        retention-days: 30

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-tests]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üåê Website URL: ${{ needs.deploy.outputs.page_url }}"
        
    - name: Deployment Failed
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        exit 1
